#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.18449
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace It.Uniba.Di.Cdg.SocialTfs.ProxyServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SocialTFS")]
	public partial class ConnectorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definizioni metodo Extensibility
    partial void OnCreated();
    partial void InsertAvatar(Avatar instance);
    partial void UpdateAvatar(Avatar instance);
    partial void DeleteAvatar(Avatar instance);
    partial void InsertDynamicFriend(DynamicFriend instance);
    partial void UpdateDynamicFriend(DynamicFriend instance);
    partial void DeleteDynamicFriend(DynamicFriend instance);
    partial void InsertFeature(Feature instance);
    partial void UpdateFeature(Feature instance);
    partial void DeleteFeature(Feature instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertPreregisteredService(PreregisteredService instance);
    partial void UpdatePreregisteredService(PreregisteredService instance);
    partial void DeletePreregisteredService(PreregisteredService instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceInstance(ServiceInstance instance);
    partial void UpdateServiceInstance(ServiceInstance instance);
    partial void DeleteServiceInstance(ServiceInstance instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertStaticFriend(StaticFriend instance);
    partial void UpdateStaticFriend(StaticFriend instance);
    partial void DeleteStaticFriend(StaticFriend instance);
    partial void InsertSuggestion(Suggestion instance);
    partial void UpdateSuggestion(Suggestion instance);
    partial void DeleteSuggestion(Suggestion instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertFeatureScore(FeatureScore instance);
    partial void UpdateFeatureScore(FeatureScore instance);
    partial void DeleteFeatureScore(FeatureScore instance);
    partial void InsertInteractiveFriend(InteractiveFriend instance);
    partial void UpdateInteractiveFriend(InteractiveFriend instance);
    partial void DeleteInteractiveFriend(InteractiveFriend instance);
    partial void InsertChosenFeature(ChosenFeature instance);
    partial void UpdateChosenFeature(ChosenFeature instance);
    partial void DeleteChosenFeature(ChosenFeature instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertHidden(Hidden instance);
    partial void UpdateHidden(Hidden instance);
    partial void DeleteHidden(Hidden instance);
    #endregion
		
		public ConnectorDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SocialTFSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ConnectorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Avatar> Avatars
		{
			get
			{
				return this.GetTable<Avatar>();
			}
		}
		
		public System.Data.Linq.Table<DynamicFriend> DynamicFriends
		{
			get
			{
				return this.GetTable<DynamicFriend>();
			}
		}
		
		public System.Data.Linq.Table<Feature> Features
		{
			get
			{
				return this.GetTable<Feature>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<PreregisteredService> PreregisteredServices
		{
			get
			{
				return this.GetTable<PreregisteredService>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceInstance> ServiceInstances
		{
			get
			{
				return this.GetTable<ServiceInstance>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<StaticFriend> StaticFriends
		{
			get
			{
				return this.GetTable<StaticFriend>();
			}
		}
		
		public System.Data.Linq.Table<Suggestion> Suggestions
		{
			get
			{
				return this.GetTable<Suggestion>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<FeatureScore> FeatureScores
		{
			get
			{
				return this.GetTable<FeatureScore>();
			}
		}
		
		public System.Data.Linq.Table<InteractiveFriend> InteractiveFriends
		{
			get
			{
				return this.GetTable<InteractiveFriend>();
			}
		}
		
		public System.Data.Linq.Table<ChosenFeature> ChosenFeatures
		{
			get
			{
				return this.GetTable<ChosenFeature>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Hidden> Hiddens
		{
			get
			{
				return this.GetTable<Hidden>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EncDecRc4", IsComposable=true)]
		public string EncDecRc4([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pwd", DbType="VarChar(256)")] string pwd, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Text", DbType="VarChar(100)")] string text)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pwd, text).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Encrypt", IsComposable=true)]
		public System.Data.Linq.Binary Encrypt([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(4000)")] string password)
		{
			return ((System.Data.Linq.Binary)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), password).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Avatar")]
	public partial class Avatar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _uri;
		
		private long _chosenFeature;
		
		private EntityRef<ChosenFeature> _ChosenFeature;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuriChanging(string value);
    partial void OnuriChanged();
    partial void OnchosenFeatureChanging(long value);
    partial void OnchosenFeatureChanged();
    #endregion
		
		public Avatar()
		{
			this._ChosenFeature = default(EntityRef<ChosenFeature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uri", DbType="NVarChar(512) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string uri
		{
			get
			{
				return this._uri;
			}
			set
			{
				if ((this._uri != value))
				{
					this.OnuriChanging(value);
					this.SendPropertyChanging();
					this._uri = value;
					this.SendPropertyChanged("uri");
					this.OnuriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenFeature", DbType="BigInt NOT NULL")]
		public long chosenFeature
		{
			get
			{
				return this._chosenFeature;
			}
			set
			{
				if ((this._chosenFeature != value))
				{
					if (this._ChosenFeature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchosenFeatureChanging(value);
					this.SendPropertyChanging();
					this._chosenFeature = value;
					this.SendPropertyChanged("chosenFeature");
					this.OnchosenFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Avatar", Storage="_ChosenFeature", ThisKey="chosenFeature", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChosenFeature ChosenFeature
		{
			get
			{
				return this._ChosenFeature.Entity;
			}
			set
			{
				ChosenFeature previousValue = this._ChosenFeature.Entity;
				if (((previousValue != value) 
							|| (this._ChosenFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChosenFeature.Entity = null;
						previousValue.Avatars.Remove(this);
					}
					this._ChosenFeature.Entity = value;
					if ((value != null))
					{
						value.Avatars.Add(this);
						this._chosenFeature = value.id;
					}
					else
					{
						this._chosenFeature = default(long);
					}
					this.SendPropertyChanged("ChosenFeature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DynamicFriend")]
	public partial class DynamicFriend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user;
		
		private long _chosenFeature;
		
		private EntityRef<User> _User;
		
		private EntityRef<ChosenFeature> _ChosenFeature;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnchosenFeatureChanging(long value);
    partial void OnchosenFeatureChanged();
    #endregion
		
		public DynamicFriend()
		{
			this._User = default(EntityRef<User>);
			this._ChosenFeature = default(EntityRef<ChosenFeature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenFeature", DbType="BigInt NOT NULL")]
		public long chosenFeature
		{
			get
			{
				return this._chosenFeature;
			}
			set
			{
				if ((this._chosenFeature != value))
				{
					if (this._ChosenFeature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchosenFeatureChanging(value);
					this.SendPropertyChanging();
					this._chosenFeature = value;
					this.SendPropertyChanged("chosenFeature");
					this.OnchosenFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DynamicFriend", Storage="_User", ThisKey="user", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DynamicFriends.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DynamicFriends.Add(this);
						this._user = value.id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_DynamicFriend", Storage="_ChosenFeature", ThisKey="chosenFeature", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChosenFeature ChosenFeature
		{
			get
			{
				return this._ChosenFeature.Entity;
			}
			set
			{
				ChosenFeature previousValue = this._ChosenFeature.Entity;
				if (((previousValue != value) 
							|| (this._ChosenFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChosenFeature.Entity = null;
						previousValue.DynamicFriends.Remove(this);
					}
					this._ChosenFeature.Entity = value;
					if ((value != null))
					{
						value.DynamicFriends.Add(this);
						this._chosenFeature = value.id;
					}
					else
					{
						this._chosenFeature = default(long);
					}
					this.SendPropertyChanged("ChosenFeature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feature")]
	public partial class Feature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _description;
		
		private bool _public;
		
		private EntitySet<FeatureScore> _FeatureScores;
		
		private EntitySet<ChosenFeature> _ChosenFeatures;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpublicChanging(bool value);
    partial void OnpublicChanged();
    #endregion
		
		public Feature()
		{
			this._FeatureScores = new EntitySet<FeatureScore>(new Action<FeatureScore>(this.attach_FeatureScores), new Action<FeatureScore>(this.detach_FeatureScores));
			this._ChosenFeatures = new EntitySet<ChosenFeature>(new Action<ChosenFeature>(this.attach_ChosenFeatures), new Action<ChosenFeature>(this.detach_ChosenFeatures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[public]", Storage="_public", DbType="Bit NOT NULL")]
		public bool @public
		{
			get
			{
				return this._public;
			}
			set
			{
				if ((this._public != value))
				{
					this.OnpublicChanging(value);
					this.SendPropertyChanging();
					this._public = value;
					this.SendPropertyChanged("@public");
					this.OnpublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feature_FeatureScore", Storage="_FeatureScores", ThisKey="name", OtherKey="feature")]
		public EntitySet<FeatureScore> FeatureScores
		{
			get
			{
				return this._FeatureScores;
			}
			set
			{
				this._FeatureScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feature_ChosenFeature", Storage="_ChosenFeatures", ThisKey="name", OtherKey="feature")]
		public EntitySet<ChosenFeature> ChosenFeatures
		{
			get
			{
				return this._ChosenFeatures;
			}
			set
			{
				this._ChosenFeatures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeatureScores(FeatureScore entity)
		{
			this.SendPropertyChanging();
			entity.Feature = this;
		}
		
		private void detach_FeatureScores(FeatureScore entity)
		{
			this.SendPropertyChanging();
			entity.Feature = null;
		}
		
		private void attach_ChosenFeatures(ChosenFeature entity)
		{
			this.SendPropertyChanging();
			entity.Feature = this;
		}
		
		private void detach_ChosenFeatures(ChosenFeature entity)
		{
			this.SendPropertyChanging();
			entity.Feature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _chosenFeature;
		
		private System.Nullable<long> _idOnService;
		
		private string _message;
		
		private System.DateTime _createAt;
		
		private EntityRef<ChosenFeature> _ChosenFeature;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnchosenFeatureChanging(long value);
    partial void OnchosenFeatureChanged();
    partial void OnidOnServiceChanging(System.Nullable<long> value);
    partial void OnidOnServiceChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OncreateAtChanging(System.DateTime value);
    partial void OncreateAtChanged();
    #endregion
		
		public Post()
		{
			this._ChosenFeature = default(EntityRef<ChosenFeature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenFeature", DbType="BigInt NOT NULL")]
		public long chosenFeature
		{
			get
			{
				return this._chosenFeature;
			}
			set
			{
				if ((this._chosenFeature != value))
				{
					if (this._ChosenFeature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchosenFeatureChanging(value);
					this.SendPropertyChanging();
					this._chosenFeature = value;
					this.SendPropertyChanged("chosenFeature");
					this.OnchosenFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOnService", DbType="BigInt")]
		public System.Nullable<long> idOnService
		{
			get
			{
				return this._idOnService;
			}
			set
			{
				if ((this._idOnService != value))
				{
					this.OnidOnServiceChanging(value);
					this.SendPropertyChanging();
					this._idOnService = value;
					this.SendPropertyChanged("idOnService");
					this.OnidOnServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createAt", DbType="DateTime NOT NULL")]
		public System.DateTime createAt
		{
			get
			{
				return this._createAt;
			}
			set
			{
				if ((this._createAt != value))
				{
					this.OncreateAtChanging(value);
					this.SendPropertyChanging();
					this._createAt = value;
					this.SendPropertyChanged("createAt");
					this.OncreateAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Post", Storage="_ChosenFeature", ThisKey="chosenFeature", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChosenFeature ChosenFeature
		{
			get
			{
				return this._ChosenFeature.Entity;
			}
			set
			{
				ChosenFeature previousValue = this._ChosenFeature.Entity;
				if (((previousValue != value) 
							|| (this._ChosenFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChosenFeature.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._ChosenFeature.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._chosenFeature = value.id;
					}
					else
					{
						this._chosenFeature = default(long);
					}
					this.SendPropertyChanged("ChosenFeature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PreregisteredService")]
	public partial class PreregisteredService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _host;
		
		private int _service;
		
		private string _consumerKey;
		
		private string _consumerSecret;
		
		private EntityRef<Service> _Service;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnhostChanging(string value);
    partial void OnhostChanged();
    partial void OnserviceChanging(int value);
    partial void OnserviceChanged();
    partial void OnconsumerKeyChanging(string value);
    partial void OnconsumerKeyChanged();
    partial void OnconsumerSecretChanging(string value);
    partial void OnconsumerSecretChanged();
    #endregion
		
		public PreregisteredService()
		{
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_host", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string host
		{
			get
			{
				return this._host;
			}
			set
			{
				if ((this._host != value))
				{
					this.OnhostChanging(value);
					this.SendPropertyChanging();
					this._host = value;
					this.SendPropertyChanged("host");
					this.OnhostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service", DbType="Int NOT NULL")]
		public int service
		{
			get
			{
				return this._service;
			}
			set
			{
				if ((this._service != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceChanging(value);
					this.SendPropertyChanging();
					this._service = value;
					this.SendPropertyChanged("service");
					this.OnserviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumerKey", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string consumerKey
		{
			get
			{
				return this._consumerKey;
			}
			set
			{
				if ((this._consumerKey != value))
				{
					this.OnconsumerKeyChanging(value);
					this.SendPropertyChanging();
					this._consumerKey = value;
					this.SendPropertyChanged("consumerKey");
					this.OnconsumerKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumerSecret", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string consumerSecret
		{
			get
			{
				return this._consumerSecret;
			}
			set
			{
				if ((this._consumerSecret != value))
				{
					this.OnconsumerSecretChanging(value);
					this.SendPropertyChanging();
					this._consumerSecret = value;
					this.SendPropertyChanged("consumerSecret");
					this.OnconsumerSecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PreregisteredService", Storage="_Service", ThisKey="service", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.PreregisteredServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.PreregisteredServices.Add(this);
						this._service = value.id;
					}
					else
					{
						this._service = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _image;
		
		private string _requestToken;
		
		private string _authorize;
		
		private string _accessToken;
		
		private int _version;
		
		private EntitySet<PreregisteredService> _PreregisteredServices;
		
		private EntitySet<ServiceInstance> _ServiceInstances;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnrequestTokenChanging(string value);
    partial void OnrequestTokenChanged();
    partial void OnauthorizeChanging(string value);
    partial void OnauthorizeChanged();
    partial void OnaccessTokenChanging(string value);
    partial void OnaccessTokenChanged();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    #endregion
		
		public Service()
		{
			this._PreregisteredServices = new EntitySet<PreregisteredService>(new Action<PreregisteredService>(this.attach_PreregisteredServices), new Action<PreregisteredService>(this.detach_PreregisteredServices));
			this._ServiceInstances = new EntitySet<ServiceInstance>(new Action<ServiceInstance>(this.attach_ServiceInstances), new Action<ServiceInstance>(this.detach_ServiceInstances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_requestToken", DbType="NVarChar(100)")]
		public string requestToken
		{
			get
			{
				return this._requestToken;
			}
			set
			{
				if ((this._requestToken != value))
				{
					this.OnrequestTokenChanging(value);
					this.SendPropertyChanging();
					this._requestToken = value;
					this.SendPropertyChanged("requestToken");
					this.OnrequestTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorize", DbType="NVarChar(100)")]
		public string authorize
		{
			get
			{
				return this._authorize;
			}
			set
			{
				if ((this._authorize != value))
				{
					this.OnauthorizeChanging(value);
					this.SendPropertyChanging();
					this._authorize = value;
					this.SendPropertyChanged("authorize");
					this.OnauthorizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessToken", DbType="NVarChar(100)")]
		public string accessToken
		{
			get
			{
				return this._accessToken;
			}
			set
			{
				if ((this._accessToken != value))
				{
					this.OnaccessTokenChanging(value);
					this.SendPropertyChanging();
					this._accessToken = value;
					this.SendPropertyChanged("accessToken");
					this.OnaccessTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Int NOT NULL")]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_PreregisteredService", Storage="_PreregisteredServices", ThisKey="id", OtherKey="service")]
		public EntitySet<PreregisteredService> PreregisteredServices
		{
			get
			{
				return this._PreregisteredServices;
			}
			set
			{
				this._PreregisteredServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceInstance", Storage="_ServiceInstances", ThisKey="id", OtherKey="service")]
		public EntitySet<ServiceInstance> ServiceInstances
		{
			get
			{
				return this._ServiceInstances;
			}
			set
			{
				this._ServiceInstances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PreregisteredServices(PreregisteredService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_PreregisteredServices(PreregisteredService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServiceInstances(ServiceInstance entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceInstances(ServiceInstance entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceInstance")]
	public partial class ServiceInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _host;
		
		private int _service;
		
		private string _consumerKey;
		
		private string _consumerSecret;
		
		private EntitySet<FeatureScore> _FeatureScores;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<Service> _Service;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnhostChanging(string value);
    partial void OnhostChanged();
    partial void OnserviceChanging(int value);
    partial void OnserviceChanged();
    partial void OnconsumerKeyChanging(string value);
    partial void OnconsumerKeyChanged();
    partial void OnconsumerSecretChanging(string value);
    partial void OnconsumerSecretChanged();
    #endregion
		
		public ServiceInstance()
		{
			this._FeatureScores = new EntitySet<FeatureScore>(new Action<FeatureScore>(this.attach_FeatureScores), new Action<FeatureScore>(this.detach_FeatureScores));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_host", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string host
		{
			get
			{
				return this._host;
			}
			set
			{
				if ((this._host != value))
				{
					this.OnhostChanging(value);
					this.SendPropertyChanging();
					this._host = value;
					this.SendPropertyChanged("host");
					this.OnhostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service", DbType="Int NOT NULL")]
		public int service
		{
			get
			{
				return this._service;
			}
			set
			{
				if ((this._service != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceChanging(value);
					this.SendPropertyChanging();
					this._service = value;
					this.SendPropertyChanged("service");
					this.OnserviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumerKey", DbType="NVarChar(50)")]
		public string consumerKey
		{
			get
			{
				return this._consumerKey;
			}
			set
			{
				if ((this._consumerKey != value))
				{
					this.OnconsumerKeyChanging(value);
					this.SendPropertyChanging();
					this._consumerKey = value;
					this.SendPropertyChanged("consumerKey");
					this.OnconsumerKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_consumerSecret", DbType="NVarChar(50)")]
		public string consumerSecret
		{
			get
			{
				return this._consumerSecret;
			}
			set
			{
				if ((this._consumerSecret != value))
				{
					this.OnconsumerSecretChanging(value);
					this.SendPropertyChanging();
					this._consumerSecret = value;
					this.SendPropertyChanged("consumerSecret");
					this.OnconsumerSecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceInstance_FeatureScore", Storage="_FeatureScores", ThisKey="id", OtherKey="serviceInstance")]
		public EntitySet<FeatureScore> FeatureScores
		{
			get
			{
				return this._FeatureScores;
			}
			set
			{
				this._FeatureScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceInstance_Registration", Storage="_Registrations", ThisKey="id", OtherKey="serviceInstance")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceInstance", Storage="_Service", ThisKey="service", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceInstances.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceInstances.Add(this);
						this._service = value.id;
					}
					else
					{
						this._service = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeatureScores(FeatureScore entity)
		{
			this.SendPropertyChanging();
			entity.ServiceInstance = this;
		}
		
		private void detach_FeatureScores(FeatureScore entity)
		{
			this.SendPropertyChanging();
			entity.ServiceInstance = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.ServiceInstance = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.ServiceInstance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skills")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _chosenFeature;
		
		private string _skill;
		
		private EntityRef<ChosenFeature> _ChosenFeature;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnchosenFeatureChanging(long value);
    partial void OnchosenFeatureChanged();
    partial void OnskillChanging(string value);
    partial void OnskillChanged();
    #endregion
		
		public Skill()
		{
			this._ChosenFeature = default(EntityRef<ChosenFeature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenFeature", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long chosenFeature
		{
			get
			{
				return this._chosenFeature;
			}
			set
			{
				if ((this._chosenFeature != value))
				{
					if (this._ChosenFeature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchosenFeatureChanging(value);
					this.SendPropertyChanging();
					this._chosenFeature = value;
					this.SendPropertyChanged("chosenFeature");
					this.OnchosenFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_skill", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string skill
		{
			get
			{
				return this._skill;
			}
			set
			{
				if ((this._skill != value))
				{
					this.OnskillChanging(value);
					this.SendPropertyChanging();
					this._skill = value;
					this.SendPropertyChanged("skill");
					this.OnskillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Skill", Storage="_ChosenFeature", ThisKey="chosenFeature", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChosenFeature ChosenFeature
		{
			get
			{
				return this._ChosenFeature.Entity;
			}
			set
			{
				ChosenFeature previousValue = this._ChosenFeature.Entity;
				if (((previousValue != value) 
							|| (this._ChosenFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChosenFeature.Entity = null;
						previousValue.Skills.Remove(this);
					}
					this._ChosenFeature.Entity = value;
					if ((value != null))
					{
						value.Skills.Add(this);
						this._chosenFeature = value.id;
					}
					else
					{
						this._chosenFeature = default(long);
					}
					this.SendPropertyChanged("ChosenFeature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaticFriend")]
	public partial class StaticFriend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user;
		
		private int _friend;
		
		private EntityRef<User> _UserFriend;
		
		private EntityRef<User> _User;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnfriendChanging(int value);
    partial void OnfriendChanged();
    #endregion
		
		public StaticFriend()
		{
			this._UserFriend = default(EntityRef<User>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_friend", DbType="Int NOT NULL")]
		public int friend
		{
			get
			{
				return this._friend;
			}
			set
			{
				if ((this._friend != value))
				{
					if (this._UserFriend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfriendChanging(value);
					this.SendPropertyChanging();
					this._friend = value;
					this.SendPropertyChanged("friend");
					this.OnfriendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StaticFriend", Storage="_UserFriend", ThisKey="friend", OtherKey="id", IsForeignKey=true)]
		public User Friend
		{
			get
			{
				return this._UserFriend.Entity;
			}
			set
			{
				User previousValue = this._UserFriend.Entity;
				if (((previousValue != value) 
							|| (this._UserFriend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserFriend.Entity = null;
						previousValue.StaticFriends.Remove(this);
					}
					this._UserFriend.Entity = value;
					if ((value != null))
					{
						value.StaticFriends.Add(this);
						this._friend = value.id;
					}
					else
					{
						this._friend = default(int);
					}
					this.SendPropertyChanged("Friend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StaticFriend1", Storage="_User", ThisKey="user", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StaticFriends1.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StaticFriends1.Add(this);
						this._user = value.id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suggestion")]
	public partial class Suggestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user;
		
		private long _chosenFeature;
		
		private EntityRef<User> _User;
		
		private EntityRef<ChosenFeature> _ChosenFeature;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnchosenFeatureChanging(long value);
    partial void OnchosenFeatureChanged();
    #endregion
		
		public Suggestion()
		{
			this._User = default(EntityRef<User>);
			this._ChosenFeature = default(EntityRef<ChosenFeature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenFeature", DbType="BigInt NOT NULL")]
		public long chosenFeature
		{
			get
			{
				return this._chosenFeature;
			}
			set
			{
				if ((this._chosenFeature != value))
				{
					if (this._ChosenFeature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchosenFeatureChanging(value);
					this.SendPropertyChanging();
					this._chosenFeature = value;
					this.SendPropertyChanged("chosenFeature");
					this.OnchosenFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Suggestion", Storage="_User", ThisKey="user", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Suggestions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Suggestions.Add(this);
						this._user = value.id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Suggestion", Storage="_ChosenFeature", ThisKey="chosenFeature", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChosenFeature ChosenFeature
		{
			get
			{
				return this._ChosenFeature.Entity;
			}
			set
			{
				ChosenFeature previousValue = this._ChosenFeature.Entity;
				if (((previousValue != value) 
							|| (this._ChosenFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChosenFeature.Entity = null;
						previousValue.Suggestions.Remove(this);
					}
					this._ChosenFeature.Entity = value;
					if ((value != null))
					{
						value.Suggestions.Add(this);
						this._chosenFeature = value.id;
					}
					else
					{
						this._chosenFeature = default(long);
					}
					this.SendPropertyChanged("ChosenFeature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _key;
		
		private string _value;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[key]", Storage="_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private string _email;
		
		private System.Data.Linq.Binary _password;
		
		private string _avatar;
		
		private bool _active;
		
		private bool _isAdmin;
		
		private EntitySet<DynamicFriend> _DynamicFriends;
		
		private EntitySet<StaticFriend> _StaticFriends;
		
		private EntitySet<StaticFriend> _StaticFriends1;
		
		private EntitySet<Suggestion> _Suggestions;
		
		private EntitySet<InteractiveFriend> _InteractiveFriends;
		
		private EntitySet<Registration> _Registrations;
		
		private EntitySet<Hidden> _Hiddens;
		
		private EntitySet<Hidden> _Hiddens1;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(System.Data.Linq.Binary value);
    partial void OnpasswordChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnisAdminChanging(bool value);
    partial void OnisAdminChanged();
    #endregion
		
		public User()
		{
			this._DynamicFriends = new EntitySet<DynamicFriend>(new Action<DynamicFriend>(this.attach_DynamicFriends), new Action<DynamicFriend>(this.detach_DynamicFriends));
			this._StaticFriends = new EntitySet<StaticFriend>(new Action<StaticFriend>(this.attach_StaticFriends), new Action<StaticFriend>(this.detach_StaticFriends));
			this._StaticFriends1 = new EntitySet<StaticFriend>(new Action<StaticFriend>(this.attach_StaticFriends1), new Action<StaticFriend>(this.detach_StaticFriends1));
			this._Suggestions = new EntitySet<Suggestion>(new Action<Suggestion>(this.attach_Suggestions), new Action<Suggestion>(this.detach_Suggestions));
			this._InteractiveFriends = new EntitySet<InteractiveFriend>(new Action<InteractiveFriend>(this.attach_InteractiveFriends), new Action<InteractiveFriend>(this.detach_InteractiveFriends));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Hiddens = new EntitySet<Hidden>(new Action<Hidden>(this.attach_Hiddens), new Action<Hidden>(this.detach_Hiddens));
			this._Hiddens1 = new EntitySet<Hidden>(new Action<Hidden>(this.attach_Hiddens1), new Action<Hidden>(this.detach_Hiddens1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarBinary(4000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="NVarChar(512)")]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdmin", DbType="Bit NOT NULL")]
		public bool isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DynamicFriend", Storage="_DynamicFriends", ThisKey="id", OtherKey="user")]
		public EntitySet<DynamicFriend> DynamicFriends
		{
			get
			{
				return this._DynamicFriends;
			}
			set
			{
				this._DynamicFriends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StaticFriend", Storage="_StaticFriends", ThisKey="id", OtherKey="friend")]
		public EntitySet<StaticFriend> StaticFriends
		{
			get
			{
				return this._StaticFriends;
			}
			set
			{
				this._StaticFriends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StaticFriend1", Storage="_StaticFriends1", ThisKey="id", OtherKey="user")]
		public EntitySet<StaticFriend> StaticFriends1
		{
			get
			{
				return this._StaticFriends1;
			}
			set
			{
				this._StaticFriends1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Suggestion", Storage="_Suggestions", ThisKey="id", OtherKey="user")]
		public EntitySet<Suggestion> Suggestions
		{
			get
			{
				return this._Suggestions;
			}
			set
			{
				this._Suggestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InteractiveFriend", Storage="_InteractiveFriends", ThisKey="id", OtherKey="user")]
		public EntitySet<InteractiveFriend> InteractiveFriends
		{
			get
			{
				return this._InteractiveFriends;
			}
			set
			{
				this._InteractiveFriends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_Registrations", ThisKey="id", OtherKey="user")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hidden", Storage="_Hiddens", ThisKey="id", OtherKey="friend")]
		public EntitySet<Hidden> Hiddens
		{
			get
			{
				return this._Hiddens;
			}
			set
			{
				this._Hiddens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hidden1", Storage="_Hiddens1", ThisKey="id", OtherKey="user")]
		public EntitySet<Hidden> Hiddens1
		{
			get
			{
				return this._Hiddens1;
			}
			set
			{
				this._Hiddens1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DynamicFriends(DynamicFriend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DynamicFriends(DynamicFriend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StaticFriends(StaticFriend entity)
		{
			this.SendPropertyChanging();
			entity.Friend = this;
		}
		
		private void detach_StaticFriends(StaticFriend entity)
		{
			this.SendPropertyChanging();
			entity.Friend = null;
		}
		
		private void attach_StaticFriends1(StaticFriend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StaticFriends1(StaticFriend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_InteractiveFriends(InteractiveFriend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_InteractiveFriends(InteractiveFriend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Hiddens(Hidden entity)
		{
			this.SendPropertyChanging();
			entity.Friend = this;
		}
		
		private void detach_Hiddens(Hidden entity)
		{
			this.SendPropertyChanging();
			entity.Friend = null;
		}
		
		private void attach_Hiddens1(Hidden entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Hiddens1(Hidden entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeatureScore")]
	public partial class FeatureScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _serviceInstance;
		
		private string _feature;
		
		private int _score;
		
		private EntityRef<Feature> _Feature;
		
		private EntityRef<ServiceInstance> _ServiceInstance;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnserviceInstanceChanging(int value);
    partial void OnserviceInstanceChanged();
    partial void OnfeatureChanging(string value);
    partial void OnfeatureChanged();
    partial void OnscoreChanging(int value);
    partial void OnscoreChanged();
    #endregion
		
		public FeatureScore()
		{
			this._Feature = default(EntityRef<Feature>);
			this._ServiceInstance = default(EntityRef<ServiceInstance>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceInstance", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int serviceInstance
		{
			get
			{
				return this._serviceInstance;
			}
			set
			{
				if ((this._serviceInstance != value))
				{
					if (this._ServiceInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceInstanceChanging(value);
					this.SendPropertyChanging();
					this._serviceInstance = value;
					this.SendPropertyChanged("serviceInstance");
					this.OnserviceInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feature", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string feature
		{
			get
			{
				return this._feature;
			}
			set
			{
				if ((this._feature != value))
				{
					if (this._Feature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfeatureChanging(value);
					this.SendPropertyChanging();
					this._feature = value;
					this.SendPropertyChanged("feature");
					this.OnfeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Int NOT NULL")]
		public int score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feature_FeatureScore", Storage="_Feature", ThisKey="feature", OtherKey="name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Feature Feature
		{
			get
			{
				return this._Feature.Entity;
			}
			set
			{
				Feature previousValue = this._Feature.Entity;
				if (((previousValue != value) 
							|| (this._Feature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feature.Entity = null;
						previousValue.FeatureScores.Remove(this);
					}
					this._Feature.Entity = value;
					if ((value != null))
					{
						value.FeatureScores.Add(this);
						this._feature = value.name;
					}
					else
					{
						this._feature = default(string);
					}
					this.SendPropertyChanged("Feature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceInstance_FeatureScore", Storage="_ServiceInstance", ThisKey="serviceInstance", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServiceInstance ServiceInstance
		{
			get
			{
				return this._ServiceInstance.Entity;
			}
			set
			{
				ServiceInstance previousValue = this._ServiceInstance.Entity;
				if (((previousValue != value) 
							|| (this._ServiceInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceInstance.Entity = null;
						previousValue.FeatureScores.Remove(this);
					}
					this._ServiceInstance.Entity = value;
					if ((value != null))
					{
						value.FeatureScores.Add(this);
						this._serviceInstance = value.id;
					}
					else
					{
						this._serviceInstance = default(int);
					}
					this.SendPropertyChanged("ServiceInstance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractiveFriend")]
	public partial class InteractiveFriend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _user;
		
		private long _chosenFeature;
		
		private string _collection;
		
		private string _interactiveObject;
		
		private string _objectType;
		
		private EntityRef<User> _User;
		
		private EntityRef<ChosenFeature> _ChosenFeature;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnchosenFeatureChanging(long value);
    partial void OnchosenFeatureChanged();
    partial void OncollectionChanging(string value);
    partial void OncollectionChanged();
    partial void OninteractiveObjectChanging(string value);
    partial void OninteractiveObjectChanged();
    partial void OnobjectTypeChanging(string value);
    partial void OnobjectTypeChanged();
    #endregion
		
		public InteractiveFriend()
		{
			this._User = default(EntityRef<User>);
			this._ChosenFeature = default(EntityRef<ChosenFeature>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_chosenFeature", DbType="BigInt NOT NULL")]
		public long chosenFeature
		{
			get
			{
				return this._chosenFeature;
			}
			set
			{
				if ((this._chosenFeature != value))
				{
					if (this._ChosenFeature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchosenFeatureChanging(value);
					this.SendPropertyChanging();
					this._chosenFeature = value;
					this.SendPropertyChanged("chosenFeature");
					this.OnchosenFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_collection", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string collection
		{
			get
			{
				return this._collection;
			}
			set
			{
				if ((this._collection != value))
				{
					this.OncollectionChanging(value);
					this.SendPropertyChanging();
					this._collection = value;
					this.SendPropertyChanged("collection");
					this.OncollectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interactiveObject", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string interactiveObject
		{
			get
			{
				return this._interactiveObject;
			}
			set
			{
				if ((this._interactiveObject != value))
				{
					this.OninteractiveObjectChanging(value);
					this.SendPropertyChanging();
					this._interactiveObject = value;
					this.SendPropertyChanged("interactiveObject");
					this.OninteractiveObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_objectType", DbType="NVarChar(8) NOT NULL", CanBeNull=false)]
		public string objectType
		{
			get
			{
				return this._objectType;
			}
			set
			{
				if ((this._objectType != value))
				{
					this.OnobjectTypeChanging(value);
					this.SendPropertyChanging();
					this._objectType = value;
					this.SendPropertyChanged("objectType");
					this.OnobjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InteractiveFriend", Storage="_User", ThisKey="user", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.InteractiveFriends.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.InteractiveFriends.Add(this);
						this._user = value.id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_InteractiveFriend", Storage="_ChosenFeature", ThisKey="chosenFeature", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ChosenFeature ChosenFeature
		{
			get
			{
				return this._ChosenFeature.Entity;
			}
			set
			{
				ChosenFeature previousValue = this._ChosenFeature.Entity;
				if (((previousValue != value) 
							|| (this._ChosenFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChosenFeature.Entity = null;
						previousValue.InteractiveFriends.Remove(this);
					}
					this._ChosenFeature.Entity = value;
					if ((value != null))
					{
						value.InteractiveFriends.Add(this);
						this._chosenFeature = value.id;
					}
					else
					{
						this._chosenFeature = default(long);
					}
					this.SendPropertyChanged("ChosenFeature");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChosenFeature")]
	public partial class ChosenFeature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _user;
		
		private int _serviceInstance;
		
		private string _feature;
		
		private System.Nullable<System.DateTime> _lastDownload;
		
		private EntitySet<Avatar> _Avatars;
		
		private EntitySet<DynamicFriend> _DynamicFriends;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Skill> _Skills;
		
		private EntitySet<Suggestion> _Suggestions;
		
		private EntitySet<InteractiveFriend> _InteractiveFriends;
		
		private EntityRef<Feature> _Feature;
		
		private EntityRef<Registration> _Registration;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnserviceInstanceChanging(int value);
    partial void OnserviceInstanceChanged();
    partial void OnfeatureChanging(string value);
    partial void OnfeatureChanged();
    partial void OnlastDownloadChanging(System.Nullable<System.DateTime> value);
    partial void OnlastDownloadChanged();
    #endregion
		
		public ChosenFeature()
		{
			this._Avatars = new EntitySet<Avatar>(new Action<Avatar>(this.attach_Avatars), new Action<Avatar>(this.detach_Avatars));
			this._DynamicFriends = new EntitySet<DynamicFriend>(new Action<DynamicFriend>(this.attach_DynamicFriends), new Action<DynamicFriend>(this.detach_DynamicFriends));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Skills = new EntitySet<Skill>(new Action<Skill>(this.attach_Skills), new Action<Skill>(this.detach_Skills));
			this._Suggestions = new EntitySet<Suggestion>(new Action<Suggestion>(this.attach_Suggestions), new Action<Suggestion>(this.detach_Suggestions));
			this._InteractiveFriends = new EntitySet<InteractiveFriend>(new Action<InteractiveFriend>(this.attach_InteractiveFriends), new Action<InteractiveFriend>(this.detach_InteractiveFriends));
			this._Feature = default(EntityRef<Feature>);
			this._Registration = default(EntityRef<Registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceInstance", DbType="Int NOT NULL")]
		public int serviceInstance
		{
			get
			{
				return this._serviceInstance;
			}
			set
			{
				if ((this._serviceInstance != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceInstanceChanging(value);
					this.SendPropertyChanging();
					this._serviceInstance = value;
					this.SendPropertyChanged("serviceInstance");
					this.OnserviceInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feature", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string feature
		{
			get
			{
				return this._feature;
			}
			set
			{
				if ((this._feature != value))
				{
					if (this._Feature.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfeatureChanging(value);
					this.SendPropertyChanging();
					this._feature = value;
					this.SendPropertyChanged("feature");
					this.OnfeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastDownload", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastDownload
		{
			get
			{
				return this._lastDownload;
			}
			set
			{
				if ((this._lastDownload != value))
				{
					this.OnlastDownloadChanging(value);
					this.SendPropertyChanging();
					this._lastDownload = value;
					this.SendPropertyChanged("lastDownload");
					this.OnlastDownloadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Avatar", Storage="_Avatars", ThisKey="id", OtherKey="chosenFeature")]
		public EntitySet<Avatar> Avatars
		{
			get
			{
				return this._Avatars;
			}
			set
			{
				this._Avatars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_DynamicFriend", Storage="_DynamicFriends", ThisKey="id", OtherKey="chosenFeature")]
		public EntitySet<DynamicFriend> DynamicFriends
		{
			get
			{
				return this._DynamicFriends;
			}
			set
			{
				this._DynamicFriends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Post", Storage="_Posts", ThisKey="id", OtherKey="chosenFeature")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Skill", Storage="_Skills", ThisKey="id", OtherKey="chosenFeature")]
		public EntitySet<Skill> Skills
		{
			get
			{
				return this._Skills;
			}
			set
			{
				this._Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_Suggestion", Storage="_Suggestions", ThisKey="id", OtherKey="chosenFeature")]
		public EntitySet<Suggestion> Suggestions
		{
			get
			{
				return this._Suggestions;
			}
			set
			{
				this._Suggestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChosenFeature_InteractiveFriend", Storage="_InteractiveFriends", ThisKey="id", OtherKey="chosenFeature")]
		public EntitySet<InteractiveFriend> InteractiveFriends
		{
			get
			{
				return this._InteractiveFriends;
			}
			set
			{
				this._InteractiveFriends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feature_ChosenFeature", Storage="_Feature", ThisKey="feature", OtherKey="name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Feature Feature
		{
			get
			{
				return this._Feature.Entity;
			}
			set
			{
				Feature previousValue = this._Feature.Entity;
				if (((previousValue != value) 
							|| (this._Feature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feature.Entity = null;
						previousValue.ChosenFeatures.Remove(this);
					}
					this._Feature.Entity = value;
					if ((value != null))
					{
						value.ChosenFeatures.Add(this);
						this._feature = value.name;
					}
					else
					{
						this._feature = default(string);
					}
					this.SendPropertyChanged("Feature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_ChosenFeature", Storage="_Registration", ThisKey="user,serviceInstance", OtherKey="user,serviceInstance", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.ChosenFeatures.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.ChosenFeatures.Add(this);
						this._user = value.user;
						this._serviceInstance = value.serviceInstance;
					}
					else
					{
						this._user = default(int);
						this._serviceInstance = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Avatars(Avatar entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = this;
		}
		
		private void detach_Avatars(Avatar entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = null;
		}
		
		private void attach_DynamicFriends(DynamicFriend entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = this;
		}
		
		private void detach_DynamicFriends(DynamicFriend entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = null;
		}
		
		private void attach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = this;
		}
		
		private void detach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = null;
		}
		
		private void attach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = this;
		}
		
		private void detach_Suggestions(Suggestion entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = null;
		}
		
		private void attach_InteractiveFriends(InteractiveFriend entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = this;
		}
		
		private void detach_InteractiveFriends(InteractiveFriend entity)
		{
			this.SendPropertyChanging();
			entity.ChosenFeature = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registration")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user;
		
		private int _serviceInstance;
		
		private string _nameOnService;
		
		private string _idOnService;
		
		private string _accessToken;
		
		private string _accessSecret;
		
		private EntitySet<ChosenFeature> _ChosenFeatures;
		
		private EntityRef<ServiceInstance> _ServiceInstance;
		
		private EntityRef<User> _User;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnserviceInstanceChanging(int value);
    partial void OnserviceInstanceChanged();
    partial void OnnameOnServiceChanging(string value);
    partial void OnnameOnServiceChanged();
    partial void OnidOnServiceChanging(string value);
    partial void OnidOnServiceChanged();
    partial void OnaccessTokenChanging(string value);
    partial void OnaccessTokenChanged();
    partial void OnaccessSecretChanging(string value);
    partial void OnaccessSecretChanged();
    #endregion
		
		public Registration()
		{
			this._ChosenFeatures = new EntitySet<ChosenFeature>(new Action<ChosenFeature>(this.attach_ChosenFeatures), new Action<ChosenFeature>(this.detach_ChosenFeatures));
			this._ServiceInstance = default(EntityRef<ServiceInstance>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serviceInstance", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int serviceInstance
		{
			get
			{
				return this._serviceInstance;
			}
			set
			{
				if ((this._serviceInstance != value))
				{
					if (this._ServiceInstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnserviceInstanceChanging(value);
					this.SendPropertyChanging();
					this._serviceInstance = value;
					this.SendPropertyChanged("serviceInstance");
					this.OnserviceInstanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameOnService", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nameOnService
		{
			get
			{
				return this._nameOnService;
			}
			set
			{
				if ((this._nameOnService != value))
				{
					this.OnnameOnServiceChanging(value);
					this.SendPropertyChanging();
					this._nameOnService = value;
					this.SendPropertyChanged("nameOnService");
					this.OnnameOnServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOnService", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string idOnService
		{
			get
			{
				return this._idOnService;
			}
			set
			{
				if ((this._idOnService != value))
				{
					this.OnidOnServiceChanging(value);
					this.SendPropertyChanging();
					this._idOnService = value;
					this.SendPropertyChanged("idOnService");
					this.OnidOnServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessToken", DbType="NVarChar(MAX)")]
		public string accessToken
		{
			get
			{
				return this._accessToken;
			}
			set
			{
				if ((this._accessToken != value))
				{
					this.OnaccessTokenChanging(value);
					this.SendPropertyChanging();
					this._accessToken = value;
					this.SendPropertyChanged("accessToken");
					this.OnaccessTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accessSecret", DbType="NVarChar(MAX)")]
		public string accessSecret
		{
			get
			{
				return this._accessSecret;
			}
			set
			{
				if ((this._accessSecret != value))
				{
					this.OnaccessSecretChanging(value);
					this.SendPropertyChanging();
					this._accessSecret = value;
					this.SendPropertyChanged("accessSecret");
					this.OnaccessSecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_ChosenFeature", Storage="_ChosenFeatures", ThisKey="user,serviceInstance", OtherKey="user,serviceInstance")]
		public EntitySet<ChosenFeature> ChosenFeatures
		{
			get
			{
				return this._ChosenFeatures;
			}
			set
			{
				this._ChosenFeatures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceInstance_Registration", Storage="_ServiceInstance", ThisKey="serviceInstance", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServiceInstance ServiceInstance
		{
			get
			{
				return this._ServiceInstance.Entity;
			}
			set
			{
				ServiceInstance previousValue = this._ServiceInstance.Entity;
				if (((previousValue != value) 
							|| (this._ServiceInstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceInstance.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._ServiceInstance.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._serviceInstance = value.id;
					}
					else
					{
						this._serviceInstance = default(int);
					}
					this.SendPropertyChanged("ServiceInstance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_User", ThisKey="user", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._user = value.id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChosenFeatures(ChosenFeature entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_ChosenFeatures(ChosenFeature entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hidden")]
	public partial class Hidden : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user;
		
		private int _friend;
		
		private string _timeline;
		
		private EntityRef<User> _Friend;
		
		private EntityRef<User> _User;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserChanging(int value);
    partial void OnuserChanged();
    partial void OnfriendChanging(int value);
    partial void OnfriendChanged();
    partial void OntimelineChanging(string value);
    partial void OntimelineChanged();
    #endregion
		
		public Hidden()
		{
			this._Friend = default(EntityRef<User>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int NOT NULL")]
		public int user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_friend", DbType="Int NOT NULL")]
		public int friend
		{
			get
			{
				return this._friend;
			}
			set
			{
				if ((this._friend != value))
				{
					if (this._Friend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfriendChanging(value);
					this.SendPropertyChanging();
					this._friend = value;
					this.SendPropertyChanged("friend");
					this.OnfriendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeline", DbType="NVarChar(11)")]
		public string timeline
		{
			get
			{
				return this._timeline;
			}
			set
			{
				if ((this._timeline != value))
				{
					this.OntimelineChanging(value);
					this.SendPropertyChanging();
					this._timeline = value;
					this.SendPropertyChanged("timeline");
					this.OntimelineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hidden", Storage="_Friend", ThisKey="friend", OtherKey="id", IsForeignKey=true)]
		public User Friend
		{
			get
			{
				return this._Friend.Entity;
			}
			set
			{
				User previousValue = this._Friend.Entity;
				if (((previousValue != value) 
							|| (this._Friend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Friend.Entity = null;
						previousValue.Hiddens.Remove(this);
					}
					this._Friend.Entity = value;
					if ((value != null))
					{
						value.Hiddens.Add(this);
						this._friend = value.id;
					}
					else
					{
						this._friend = default(int);
					}
					this.SendPropertyChanged("Friend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hidden1", Storage="_User", ThisKey="user", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Hiddens1.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Hiddens1.Add(this);
						this._user = value.id;
					}
					else
					{
						this._user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
